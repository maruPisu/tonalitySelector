import subprocess
import msvcrt
import time
from colorama import Fore, Back, Style
from colorama import init
import sys

init(autoreset=True) #colorama init

numStatus = 4
status = 0
pos = 0
nLines = 40
marker = "[MaRkEr]"
maxlen = 55

f = open("input.txt","r")
song = f.read().lower()
splittedSong = song.split("\n")
songLen = len(splittedSong)

def initStatus():
	global status
	subprocess.call("cls",shell=True)
	print("\tTRANSPOSE MUSIC!!\n\n")
	if status  == 0:
		print("Welcome, press enter to start or esc to exit")	
	elif status == 1:
		selectorPrint()
	elif status  == numStatus-1:
		print("Process finished, press enter to close the application")
	else:
		print("status {}".format(status))

def selectorPrint():
	subprocess.call("cls",shell=True)
	print("\tTRANSPOSE MUSIC!!\n\n")

	mid = int(nLines / 2)
	max = nLines
	if pos > mid:
		if pos > songLen - mid - 1:
			max = songLen 
		else:
			max = mid + pos
	for i in range(0, maxlen + 4):
		sys.stdout.write('=')
	print("")
	for idx in range(max - nLines , max):
		sys.stdout.write('| ')
		toPrint = splittedSong[idx]
		
		if not toPrint.startswith(marker) and len(toPrint) > maxlen:
			toPrint = toPrint[:maxlen - 3] + "..."
		if toPrint.startswith(marker) and len(toPrint) - len(marker) > maxlen:
			toPrint = toPrint[:maxlen - 3 + len(marker)] + "..."
			
		thisLen = len(toPrint)
		if toPrint.startswith(marker):
			toPrint = Fore.YELLOW + toPrint[len(marker):]
			thisLen = thisLen - len(marker)
		if (idx == pos):
			if splittedSong[idx] == "" or splittedSong[idx] == marker:
				toPrint =(Back.GREEN + ">")
				thisLen = 1
			else:
				toPrint = Back.GREEN + toPrint
		sys.stdout.write(toPrint)
		for i in range(thisLen, maxlen + 1):
			sys.stdout.write(' ')
		sys.stdout.write("|\n")
	for i in range(0, maxlen + 4):
		sys.stdout.write('=')
	
def selectorVertical(dir):
	global pos
	if dir < 0:
		if pos != 0:
			pos = pos -1
	else:
		if pos != songLen - 1:
			pos = pos + 1 
	selectorPrint()
	
def selectorHorizontal(dir):
	selectorPrint()
	print(dir)

def selectorSpacebar():
	if splittedSong[pos].startswith(marker):
		splittedSong[pos] = splittedSong[pos][len(marker):]
	else:
		splittedSong[pos] = marker + splittedSong[pos]
	selectorPrint()	
	
def manageEnter():
	global status
	print("enter")
	if(status + 1 < numStatus): #exit just if status = numStatus - 1 
		status += 1
		initStatus()
		return False
	else:
		return True
	
def manageEsc():
	global status
	print("esc")
	if(status > 0):	#exit just if status = 0
		status -= 1
		initStatus()
		return False
	else:
		return True
	
def manageSpacebar():
	global status
	if status == 0 or status == numStatus-1:
		return False
	if status == 1:
		selectorSpacebar()
	return False
	
def manageDownArrow():
	global status
	if status == 0 or status == numStatus-1:
		return False
	if status == 1:
		selectorVertical(1)
	return False
	
def manageUpArrow():
	global status
	if status == 0 or status == numStatus-1:
		return False
	if status == 1:
		selectorVertical(-1)
	return False
	
def manageLeftArrow():
	global status
	if status == 0 or status == numStatus-1:
		return False
	if status == 1:
		selectorHorizontal(-1)
	return False
	
def manageRightArrow():
	global status
	if status == 0 or status == numStatus-1:
		return False
	if status == 1:
		selectorHorizontal(1)
	return False

initStatus()
	
done = False
while not done:
	key = ord(msvcrt.getch())
	if key == 27: #esc
		done = manageEsc()
	elif key == 72: #up arrow
		done = manageUpArrow()
	elif key == 80: #down arrow
		done = manageDownArrow()
	elif key == 77: #right arrow
		done = manageRightArrow()
	elif key == 75: #left arrow
		done = manageLeftArrow()
	elif key == 13: #enter
		done = manageEnter()
	elif key == 32: #spacebar
		done = manageSpacebar()
